# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindowsUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QModelIndex
from PyQt5.QtWidgets import *
import pdf_Scraper as pdfScrap
import subprocess 
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 551)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.generarReporte = QtWidgets.QPushButton(self.centralwidget)
        self.generarReporte.setGeometry(QtCore.QRect(270, 330, 111, 31))
        self.generarReporte.setObjectName("generarReporte")
        self.borrarButton = QtWidgets.QPushButton(self.centralwidget)
        self.borrarButton.setGeometry(QtCore.QRect(170, 290, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.borrarButton.setFont(font)
        self.borrarButton.setStyleSheet("QPushButton#pushButton_4{\n"
"text-align: center;\n"
"text-decoration: none;\n"
"\n"
"color: #fff;\n"
"background-color: rgb(66, 135, 245);\n"
"\n"
"border-radius: 10px;\n"
"}\n"
"QPushButton:hover#pushButton_4{\n"
"    background-color:#4181e8;\n"
"}")
        self.borrarButton.setObjectName("borrarButton")
        self.examinarButton = QtWidgets.QPushButton(self.centralwidget)
        self.examinarButton.setGeometry(QtCore.QRect(280, 290, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.examinarButton.setFont(font)
        self.examinarButton.setStyleSheet("QPushButton#pushButton_2{\n"
"text-align: center;\n"
"text-decoration: none;\n"
"\n"
"color: #fff;\n"
"background-color: rgb(66, 135, 245);\n"
"\n"
"border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover#pushButton_2{\n"
"background-color: #4181e8;\n"
"}")
        self.examinarButton.setObjectName("examinarButton")
        self.agregarButton = QtWidgets.QPushButton(self.centralwidget)
        self.agregarButton.setGeometry(QtCore.QRect(60, 290, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.agregarButton.setFont(font)
        self.agregarButton.setStyleSheet("QPushButton#pushButton_3{\n"
"text-align: center;\n"
"text-decoration: none;\n"
"\n"
"color: #fff;\n"
"background-color: rgb(66, 135, 245);\n"
"\n"
"border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover#pushButton_3{\n"
"    background-color:#4181e8;\n"
"}")
        self.agregarButton.setObjectName("agregarButton")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(540, 370, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton#pushButton{\n"
"text-align: center;\n"
"text-decoration: none;\n"
"\n"
"color: #fff;\n"
"background-color: rgb(66, 135, 245);\n"
"\n"
"border-radius: 10px;\n"
"}\n"
"QPushButton:hover#pushButton{\n"
"    background-color: #4181e8;\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../.designer/backup/test/folder-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 350, 241, 16))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(30, 370, 501, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("\n"
"border: 1px solid rgb(50,50,50);\n"
"border-radius: 4px;\n"
" background-color: #f8f8f8;")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(40, 40, 401, 231))
        self.listView.setObjectName("listView")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.examinarButton.clicked.connect(self.examinar3)
        self.generarReporte.clicked.connect(self.generarReport_pdf)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.generarReporte.setText(_translate("MainWindow", "Generar Reporte"))
        self.borrarButton.setText(_translate("MainWindow", "Borrar archivo"))
        self.examinarButton.setText(_translate("MainWindow", "Examinar"))
        self.agregarButton.setText(_translate("MainWindow", "Agregar archivo"))
        self.pushButton.setText(_translate("MainWindow", "Examinar"))
        self.label_3.setText(_translate("MainWindow", "Los reportes se generaran en la ruta: "))

    def examinar3(self):
        model = QtGui.QStandardItemModel()
        files_names = QFileDialog.getOpenFileNames(filter='*.pdf')
        self.listView.setModel(model)
        for i in files_names[0]:
            item = QtGui.QStandardItem(i)
            model.appendRow(item)


    def generarReport_pdf(self):
        app.setOverrideCursor(Qt.WaitCursor)
        files = []
        path_destino = self.lineEdit_2.text() if self.lineEdit_2.text().strip() != '' else os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
        try:
            model = self.listView.model()
            for i in range(model.rowCount()):
                index =  model.index(i, 0, QModelIndex())
                files.append(model.data(index))
            pdfScrap.crearReporte(files, path_destino)
            
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText('Reporte generado en: ' + path_destino)
            msg.setWindowTitle("Information")
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            #ui.label.setText('Reporte generado en: ' + self.lineEdit_2.text())
            msg.exec_()
            subprocess.Popen([path_destino+'/Reporte.pdf'],shell=True)
        except Exception as ex:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(f"Unexpected {ex=}, {type(ex)=}")
            print(f"Unexpected {ex=}, {type(ex)=}")
            msg.setWindowTitle("Error")
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            #ui.label.setText('Error' + f"Unexpected {ex=}, {type(ex)=}")
            msg.exec_()
        app.restoreOverrideCursor()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
